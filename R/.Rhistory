)
dev.off()
png("./graficos clustering RFM/Densidad RFM.png",width = 1024, height = 880)
par(mfrow=c(2, 2),oma = c(1, 0, 3, 0))
smoothScatter(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$RECENCIA, xlab="FRECUENCIA", ylab="RECENCIA")
frame()
smoothScatter(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$MONETIZACION, xlab="FRECUENCIA",ylab="MONETIZACION")
smoothScatter(RFM_VENTAS$RECENCIA,RFM_VENTAS$MONETIZACION, xlab="RECENCIA",ylab="MONETIZACION")
mtext("Densidad de clientes mediante Modelo RFM ", outer = TRUE, cex = 2)
dev.off()
## PREPARAMOS LOS DATOS MEDIANTE SU NORMALIZACIÓN
RFM_VENTAS_NORM=scale(RFM_VENTAS[,-1])
## CALCULAMOS LOS Clusters EN FUNCIÓN AL NÚMERO ELEGIDO
NUM_CLUSTERS=8
set.seed(1234)
Modelo=kmeans(RFM_VENTAS_NORM,NUM_CLUSTERS)
## SELECCIONAMOS LOS GRUPOS
Clusters=Modelo$cluster
## MOSTRAMOS LA DISTRIBUCIÓN DE LOS GRUPOS
table(Clusters)
## MOSTRAMOS LOS DATOS REPRESENTATIVOS DE LOS GRUPOS
aggregate(RFM_VENTAS[,-1], by = list(Clusters), mean)
## O SU VERSIÓN ROBUSTA
aggregate(RFM_VENTAS[,-1], by = list(Clusters), median)
dev.off()
png(paste("./graficos clustering RFM/Kmeans ",NUM_CLUSTERS," clusters RFM.png",sep=""),width = 1024, height = 880)
par(mfrow=c(2, 2),oma = c(1, 0, 3, 0))
plot(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$RECENCIA,col=Clusters, xlab="FRECUENCIA", ylab="RECENCIA")
plot(c(0,max(RFM_VENTAS$RECENCIA)),c(0,max(RFM_VENTAS$RECENCIA)), type="n", axes=F, xlab="", ylab="",xlim=c(0,max(RFM_VENTAS$RECENCIA)),ylim=c(0,max(RFM_VENTAS$RECENCIA)))
legend(1,max(RFM_VENTAS$RECENCIA)/2-1,legend=c(1:NUM_CLUSTERS),yjust = 0.5,col=c(1:NUM_CLUSTERS),pch=15,cex=2)
plot(RFM_VENTAS$FRECUENCIA,RFM_VENTAS$MONETIZACION,col=Clusters, xlab="FRECUENCIA",ylab="MONETIZACION")
plot(RFM_VENTAS$RECENCIA,RFM_VENTAS$MONETIZACION,col=Clusters, xlab="RECENCIA",ylab="MONETIZACION")
mtext(paste("Clusterización kmeans de clientes mediante Modelo RFM",sep=""), outer = TRUE, cex = 2)
dev.off()
RFM_VENTAS$CLUSTER=Clusters
head(RFM_VENTAS)
## -------------------------------------------------------------------------
## -------------------------------------------------------------------------
setwd("C:/Users/JORGE/Desktop/TFM_final/TRANCOS/R")
library(ggplot2)
library(effects)
library(plyr)
load("data/samsungData.rda")
str(samsungData)
setwd("C:/Users/JORGE/Desktop/TFM_final/TRANCOS/R")
setwd("C:/Users/JORGE/Desktop/DATA SCIENCE MASTER/R MASTER/STATS_MODELIZACION/APRENDIZAJE NO SUPERVISADO")
if(!require("dummies")){
install.packages("dummies")
library("dummies")
}
setwd("C:/Users/JORGE/Desktop/DATA SCIENCE MASTER/R MASTER/STATS_MODELIZACION/APRENDIZAJE NO SUPERVISADO")
movies = read.table("data/movies.txt",header=TRUE, sep="|",quote="\"")
str(movies)
head(movies)
tail(movies)
table(movies$Comedy)
table(movies$Western)
table(movies$Romance, movies$Drama)
distances = dist(movies[2:20], method = "euclidean")
load("data/samsungData.rda")
str(samsungData)
head(samsungData)
tail(samsungData)
table(samsungData$activity)
str(samsungData[,c(562,563)])
table(samsungData$subject)
samsungScaled=scale(samsungData[,-c(562,563)])
set.seed(1234)
kClust1 <- kmeans(samsungScaled,centers=8)
table(kClust1$cluster,samsungData[,563])
nombres8<-c("walkup","laying","walkdown","laying","standing","sitting","laying","walkdown")
Error8=(length(samsungData[,563])-sum(nombres8[kClust1$cluster]==samsungData[,563]))/length(samsungData[,563])
samsungData[,563]
##### 11. Error test #####
clusterData[,20]
clusterData[,20]
clusterData[,2]
testData[,20]
Error=(length(testData[,20])-sum(error_segments[Modelo$cluster]==testData[,20]))/length(testData[,20])
error_segments<-c("High","Low")
Error=(length(testData[,20])-sum(error_segments[Modelo$cluster]==testData[,20]))/length(testData[,20])
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
error_segments<-c("Low","High","Low", "Low","Low","High","High","High")
Error=(length(testData[,20])-sum(error_segments[Model$cluster]==testData[,20]))/length(testData[,20])
Error=(length(testData[,20])-sum(error_segments[Model$Cluster]==testData[,20]))/length(testData[,20])
Error=(length(testData[,20])-sum(error_segments[Modelo$cluster]==testData[,20]))/length(testData[,20])
table(Modelo$cluster,testData[,20])
table(clusterData$Clusters,testData[,20])
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:15) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:15, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
error_segments<-c("Low","High","Low", "Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
error_segments<-c("Low","High","Low", "Low","Low","Low","Low","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
coches=mtcars # Base de datos ejemplo en R
NUM_CLUSTERS=10
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
NUM_CLUSTERS=7
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
NUM_CLUSTERS=9
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
NUM_CLUSTERS=5
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
NUM_CLUSTERS=8
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
testData=read.csv("test_r",stringsAsFactors = FALSE)
testData=read.csv("test_r",stringsAsFactors = FALSE)
setwd("C:/Users/JORGE/Desktop/TFM_final/TRANCOS/R")
testData=read.csv("test_r",stringsAsFactors = FALSE)
str(testData)
head(testData)
summary(testData)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','mean','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=8
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:15) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:15, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
testData=read.csv("test_r",stringsAsFactors = FALSE)
str(testData)
head(testData)
summary(testData)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','mean','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=8
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:15) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:15, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
NUM_CLUSTERS=10
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
clusterData = testData[c('ntrue','error','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=10
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:15) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:15, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
error_segments<-c("High","Low","Low", "Low","High","Low","High","Low","Low","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
error_segments<-c("High","High","Low", "Low","High","Low","Low","Low","Low","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
error_segments<-c("High","High","Low", "Low","High","High","High","Low","Low","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
NUM_CLUSTERS=8
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
testData=read.csv("test_r",stringsAsFactors = FALSE)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=8
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:15) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:15, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
NUM_CLUSTERS=10
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:15, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","Low","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","Low","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
str(testData)
head(testData)
summary(testData)
testData$re_error_seg = as.factor(testData$re_error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
summary(testData)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
testData$re_error_seg = as.factor(testData$re_error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","Low","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
testData=read.csv("test_r",stringsAsFactors = FALSE)
str(testData)
head(testData)
summary(testData)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
testData$re_error_seg = as.factor(testData$re_error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
testData=read.csv("test_r",stringsAsFactors = FALSE)
str(testData)
head(testData)
summary(testData)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
testData$re_error_seg = as.factor(testData$re_error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","Low","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
testData=read.csv("test_r",stringsAsFactors = FALSE)
str(testData)
head(testData)
summary(testData)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
testData$re_error_seg = as.factor(testData$re_error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
NUM_CLUSTERS=12
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
NUM_CLUSTERS=13
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","High","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","High","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
error_segments<-c("High","High","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","High","High","High")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
testData=read.csv("test_r",stringsAsFactors = FALSE)
str(testData)
head(testData)
summary(testData)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
testData$re_error_seg = as.factor(testData$re_error_seg)
clusterData = testData[c('ntrue','error','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","High","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","High","High","High")
error_segments<-c("High","Ñow","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","Ñow","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
error_segments<-c("High","Low","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
clusterData = testData[c('ntrue','error','mean','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
table(clusterData$Clusters,testData[,20])
error_segments<-c("High","Low","Low", "Low","Low","High","Low","Low","Low","Low","Low","Low","Low","High","Low")
Error=(length(testData[,20])-sum(error_segments[clusterData$Clusters]==testData[,20]))/length(testData[,20])
## (Total_registros - sum(coincidencias entre "estado real" y asignación del cluster)/Total_registros
Error
testData=read.csv("test_r",stringsAsFactors = FALSE)
str(testData)
head(testData)
summary(testData)
testData$cam = as.factor(testData$cam)
testData$error_seg = as.factor(testData$error_seg)
testData$re_error_seg = as.factor(testData$re_error_seg)
clusterData = testData[c('ntrue','error','mean','AvgDistance','overlapping')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
clusterData = testData[c('ntrue','error','mean','AvgDistance','overlapping','std')]
clusterData = testData[c('ntrue','error','mean','AvgDistance','overlapping','std')]
clusterDataScaled=scale(clusterData)
NUM_CLUSTERS=15
set.seed(1234)
Modelo=kmeans(clusterDataScaled,NUM_CLUSTERS)
clusterData$Clusters=Modelo$cluster
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
Intra <- (nrow(clusterData)-1)*sum(apply(clusterData,2,var))
for (i in 2:20) Intra[i] <- sum(kmeans(clusterData, centers=i)$withinss)
plot(1:20, Intra, type="b", xlab="Numero de Clusters", ylab="Suma de Errores intragrupo")
clusterData$img =testData$img
table(clusterData$Clusters)
aggregate(clusterData, by = list(clusterData$Clusters), median)
aggregate(clusterData[,-8], by = list(clusterData$Clusters), median)
table(clusterData$Clusters,testData[,20])
clusterData[clusterData$Clusters == c(1,6,14)]
clusterData[clusterData$Clusters == [c(1,6,14)]]
clusterData[clusterData$Clusters == [c(1,6,14),]]
clusterData[clusterData$Clusters == 1]
clusterData[clusterData$Clusters == c(,1)]
clusterData[clusterData$Clusters == '1']
clusterData[clusterData$Clusters == "1",]
clusterData[clusterData$Clusters == "6",]
clusterData$cam =testData$cam
aggregate(clusterData[,-8:-9], by = list(clusterData$Clusters), median)
clusterData[clusterData$Clusters == "1",]
clusterData[clusterData$Clusters == "6",]
clusterData[clusterData$Clusters == "14",]
